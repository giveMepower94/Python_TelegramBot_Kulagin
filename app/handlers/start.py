from telegram import Update
from telegram.ext import ContextTypes
from app.calendar_bot import CalendarDB
from app.users import UsersDB
import datetime

users_db = UsersDB()
calendar = CalendarDB()

# –®–∞–≥–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
CHOOSING, CREATE_NAME, CREATE_DATE, CREATE_TIME, CREATE_DETAILS = range(5)
READ_ID, DELETE_ID, EDIT_ID, EDIT_FIELD, EDIT_VALUE = range(5, 10)


async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = users_db.add_user(
        tg_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    if user_id:
        await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    return await start(update, context)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    menu_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—å-–±–æ—Ç.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "1Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        "2Ô∏è‚É£ –ß–∏—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        "3Ô∏è‚É£ –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        "4Ô∏è‚É£ –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "5Ô∏è‚É£ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )
    await update.message.reply_text(menu_text)
    return CHOOSING


async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):

    choice = update.message.text.strip()

    if choice == "1":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
        return CREATE_NAME
    elif choice == "2":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è:")
        return READ_ID
    elif choice == "3":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        return DELETE_ID
    elif choice == "4":
        user_id = update.effective_user.id
        events = calendar.get_list_event(datetime.date.today().isoformat(), user_id)
        if events:
            text = "\n\n".join(
                [f"{e['id']}: {e['name']} {e['date']} {e['time']} - {e['details']}" for e in events]
            )
            await update.message.reply_text(f"üìã –°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{text}")
        else:
            await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π")
        return await start(update, context)
    elif choice == "5":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        return EDIT_ID

    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return await start(update, context)


# === –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ===
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD):")
    return CREATE_DATE


async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date = datetime.date.fromisoformat(update.message.text)
        context.user_data['date'] = date.isoformat()
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM):")
        return CREATE_TIME
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (YYYY-MM-DD).")
        return CREATE_DATE


async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        datetime.datetime.strptime(update.message.text, "%H:%M")
        context.user_data['time'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è:")
        return CREATE_DETAILS
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (HH:MM).")
        return CREATE_TIME


async def get_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['details'] = update.message.text
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not users_db.user_exists(user_id):
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /register"
        )
        return CHOOSING

    event_id = calendar.create_event(
        context.user_data["name"],
        context.user_data["date"],
        context.user_data["time"],
        context.user_data["details"],
        user_id
    )
    await update.message.reply_text(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID {event_id} TG_ID {user_id}!")
    return await start(update, context)


# === –ß—Ç–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ===
async def read_event_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        event_id = int(update.message.text)
        user_id = update.effective_user.id
        event = calendar.read_event(event_id, user_id)
        if event:
            await update.message.reply_text(f"üìñ –°–æ–±—ã—Ç–∏–µ:\n\n{event}")
        else:
            await update.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (ID —Å–æ–±—ã—Ç–∏—è).")
    return await start(update, context)


# === –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ===
async def delete_event_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        event_id = int(update.message.text)
        user_id = update.effective_user.id
        deleted = calendar.delete_event(event_id, user_id)
        if deleted:
            await update.message.reply_text(f"üóë –°–æ–±—ã—Ç–∏–µ —Å ID {event_id} —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await update.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (ID —Å–æ–±—ã—Ç–∏—è).")
    return await start(update, context)


# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ===
async def edit_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        event_id = int(update.message.text)
        context.user_data['event_id'] = event_id
        await update.message.reply_text(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–∑: name, date, time, details"
        )
        return EDIT_FIELD
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (ID —Å–æ–±—ã—Ç–∏—è).")
        return await start(update, context)


async def edit_event_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    field = update.message.text.strip().lower()
    if field not in ['name', 'date', 'time', 'details']:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ. –í–≤–µ–¥–∏—Ç–µ name, date, time –∏–ª–∏ details."
        )
        return EDIT_FIELD
    context.user_data["edit_field"] = field
    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:")
    return EDIT_VALUE


async def edit_event_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    event_id = context.user_data['event_id']
    field = context.user_data["edit_field"]
    value = update.message.text
    user_id = update.effective_user.id

    success = calendar.edit_event(
        event_id,
        user_id,
        **{field: value}
    )

    if success:
        await update.message.reply_text(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ (–ø–æ–ª–µ {field}).")
    else:
        await update.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    return await start(update, context)
